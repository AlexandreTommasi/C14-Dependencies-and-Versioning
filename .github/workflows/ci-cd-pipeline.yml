name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=app --cov=cachorro --cov-report=xml --cov-report=html --cov-report=term-missing --junit-xml=test-results.xml -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results and coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: test-results-and-coverage
        path: |
          htmlcov/
          coverage.xml
          test-results.xml
        retention-days: 30

    - name: Archive coverage logs
      uses: actions/upload-artifact@v4
      with:
        name: coverage-logs
        path: .coverage
        retention-days: 7
        if-no-files-found: ignore

  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        pip install -r requirements.txt
    
    - name: Build package
      run: |
        python setup.py sdist

    - name: Archive distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-distribution-packages
        path: dist/*.tar.gz
        retention-days: 90

    - name: Archive build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build/
        retention-days: 7
        if-no-files-found: ignore

  notify:
    runs-on: ubuntu-latest
    needs: [test, build]  # Executa após test e build terminarem
    if: always()  # Executa mesmo se test ou build falharem

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Determine pipeline status
      id: pipeline-status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "status=SUCESSO" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "status=FALHA" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        fi
        echo "test_result=${{ needs.test.result }}" >> $GITHUB_OUTPUT
        echo "build_result=${{ needs.build.result }}" >> $GITHUB_OUTPUT

    - name: Send notification email
      env:
        NOTIFICATION_EMAIL: ${{ vars.NOTIFICATION_EMAIL || secrets.NOTIFICATION_EMAIL }}
        SENDER_EMAIL: ${{ vars.SENDER_EMAIL || 'noreply@github-actions.com' }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      run: |
        echo "${{ steps.pipeline-status.outputs.emoji }} Enviando notificação de ${{ steps.pipeline-status.outputs.status }}"
        echo "📊 Resultado dos testes: ${{ steps.pipeline-status.outputs.test_result }}"
        echo "📦 Resultado do build: ${{ steps.pipeline-status.outputs.build_result }}"
        echo "📧 Email será enviado para: $NOTIFICATION_EMAIL"
        python notify_email.py "${{ steps.pipeline-status.outputs.status }}"

    - name: Create notification summary
      run: |
        echo "## 📧 Notificação de Pipeline" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status Geral:** ${{ steps.pipeline-status.outputs.emoji }} ${{ steps.pipeline-status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Resultados detalhados:" >> $GITHUB_STEP_SUMMARY
        echo "- **Testes:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**📧 Email enviado para:** \`$NOTIFICATION_EMAIL\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🕐 Executado em:** $(date '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
      env:
        NOTIFICATION_EMAIL: ${{ vars.NOTIFICATION_EMAIL || secrets.NOTIFICATION_EMAIL }}